Grammar

    0 $accept: program $end

    1 program: s_expr EOL

    2 s_expr: number
    3       | SYMBOL
    4       | f_expr
    5       | QUIT
    6       | LPAREN let_section s_expr RPAREN
    7       | LPAREN COND s_expr s_expr s_expr RPAREN
    8       | error

    9 let_section: LPAREN LET let_list RPAREN

   10 let_list: let_elem
   11         | let_list let_elem

   12 let_elem: LPAREN TYPE SYMBOL s_expr RPAREN
   13         | LPAREN SYMBOL s_expr RPAREN

   14 number: INT
   15       | DOUBLE

   16 f_expr: LPAREN FUNC RPAREN
   17       | LPAREN FUNC s_expr_list RPAREN

   18 s_expr_list: s_expr
   19            | s_expr s_expr_list


Terminals, with rules where they appear

$end (0) 0
error (256) 8
FUNC (258) 16 17
SYMBOL (259) 3 12 13
TYPE (260) 12
INT (261) 14
DOUBLE (262) 15
LPAREN (263) 6 7 9 12 13 16 17
RPAREN (264) 6 7 9 12 13 16 17
EOL (265) 1
QUIT (266) 5
LET (267) 9
COND (268) 7


Nonterminals, with rules where they appear

$accept (14)
    on left: 0
program (15)
    on left: 1, on right: 0
s_expr (16)
    on left: 2 3 4 5 6 7 8, on right: 1 6 7 12 13 18 19
let_section (17)
    on left: 9, on right: 6
let_list (18)
    on left: 10 11, on right: 9 11
let_elem (19)
    on left: 12 13, on right: 10 11
number (20)
    on left: 14 15, on right: 2
f_expr (21)
    on left: 16 17, on right: 4
s_expr_list (22)
    on left: 18 19, on right: 17 19


state 0

    0 $accept: . program $end

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    program  go to state 7
    s_expr   go to state 8
    number   go to state 9
    f_expr   go to state 10


state 1

    8 s_expr: error .

    $default  reduce using rule 8 (s_expr)


state 2

    3 s_expr: SYMBOL .

    $default  reduce using rule 3 (s_expr)


state 3

   14 number: INT .

    $default  reduce using rule 14 (number)


state 4

   15 number: DOUBLE .

    $default  reduce using rule 15 (number)


state 5

    6 s_expr: LPAREN . let_section s_expr RPAREN
    7       | LPAREN . COND s_expr s_expr s_expr RPAREN
   16 f_expr: LPAREN . FUNC RPAREN
   17       | LPAREN . FUNC s_expr_list RPAREN

    FUNC    shift, and go to state 11
    LPAREN  shift, and go to state 12
    COND    shift, and go to state 13

    let_section  go to state 14


state 6

    5 s_expr: QUIT .

    $default  reduce using rule 5 (s_expr)


state 7

    0 $accept: program . $end

    $end  shift, and go to state 15


state 8

    1 program: s_expr . EOL

    EOL  shift, and go to state 16


state 9

    2 s_expr: number .

    $default  reduce using rule 2 (s_expr)


state 10

    4 s_expr: f_expr .

    $default  reduce using rule 4 (s_expr)


state 11

   16 f_expr: LPAREN FUNC . RPAREN
   17       | LPAREN FUNC . s_expr_list RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    RPAREN  shift, and go to state 17
    QUIT    shift, and go to state 6

    s_expr       go to state 18
    number       go to state 9
    f_expr       go to state 10
    s_expr_list  go to state 19


state 12

    9 let_section: LPAREN . LET let_list RPAREN

    LET  shift, and go to state 20


state 13

    7 s_expr: LPAREN COND . s_expr s_expr s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 21
    number  go to state 9
    f_expr  go to state 10


state 14

    6 s_expr: LPAREN let_section . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 22
    number  go to state 9
    f_expr  go to state 10


state 15

    0 $accept: program $end .

    $default  accept


state 16

    1 program: s_expr EOL .

    $default  reduce using rule 1 (program)


state 17

   16 f_expr: LPAREN FUNC RPAREN .

    $default  reduce using rule 16 (f_expr)


state 18

   18 s_expr_list: s_expr .
   19            | s_expr . s_expr_list

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    RPAREN  reduce using rule 18 (s_expr_list)

    s_expr       go to state 18
    number       go to state 9
    f_expr       go to state 10
    s_expr_list  go to state 23


state 19

   17 f_expr: LPAREN FUNC s_expr_list . RPAREN

    RPAREN  shift, and go to state 24


state 20

    9 let_section: LPAREN LET . let_list RPAREN

    LPAREN  shift, and go to state 25

    let_list  go to state 26
    let_elem  go to state 27


state 21

    7 s_expr: LPAREN COND s_expr . s_expr s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 28
    number  go to state 9
    f_expr  go to state 10


state 22

    6 s_expr: LPAREN let_section s_expr . RPAREN

    RPAREN  shift, and go to state 29


state 23

   19 s_expr_list: s_expr s_expr_list .

    $default  reduce using rule 19 (s_expr_list)


state 24

   17 f_expr: LPAREN FUNC s_expr_list RPAREN .

    $default  reduce using rule 17 (f_expr)


state 25

   12 let_elem: LPAREN . TYPE SYMBOL s_expr RPAREN
   13         | LPAREN . SYMBOL s_expr RPAREN

    SYMBOL  shift, and go to state 30
    TYPE    shift, and go to state 31


state 26

    9 let_section: LPAREN LET let_list . RPAREN
   11 let_list: let_list . let_elem

    LPAREN  shift, and go to state 25
    RPAREN  shift, and go to state 32

    let_elem  go to state 33


state 27

   10 let_list: let_elem .

    $default  reduce using rule 10 (let_list)


state 28

    7 s_expr: LPAREN COND s_expr s_expr . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 34
    number  go to state 9
    f_expr  go to state 10


state 29

    6 s_expr: LPAREN let_section s_expr RPAREN .

    $default  reduce using rule 6 (s_expr)


state 30

   13 let_elem: LPAREN SYMBOL . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 35
    number  go to state 9
    f_expr  go to state 10


state 31

   12 let_elem: LPAREN TYPE . SYMBOL s_expr RPAREN

    SYMBOL  shift, and go to state 36


state 32

    9 let_section: LPAREN LET let_list RPAREN .

    $default  reduce using rule 9 (let_section)


state 33

   11 let_list: let_list let_elem .

    $default  reduce using rule 11 (let_list)


state 34

    7 s_expr: LPAREN COND s_expr s_expr s_expr . RPAREN

    RPAREN  shift, and go to state 37


state 35

   13 let_elem: LPAREN SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 38


state 36

   12 let_elem: LPAREN TYPE SYMBOL . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 39
    number  go to state 9
    f_expr  go to state 10


state 37

    7 s_expr: LPAREN COND s_expr s_expr s_expr RPAREN .

    $default  reduce using rule 7 (s_expr)


state 38

   13 let_elem: LPAREN SYMBOL s_expr RPAREN .

    $default  reduce using rule 13 (let_elem)


state 39

   12 let_elem: LPAREN TYPE SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 40


state 40

   12 let_elem: LPAREN TYPE SYMBOL s_expr RPAREN .

    $default  reduce using rule 12 (let_elem)
