Grammar

    0 $accept: program $end

    1 program: s_expr EOL

    2 s_expr: number
    3       | SYMBOL
    4       | f_expr
    5       | QUIT
    6       | LPAREN let_section s_expr RPAREN
    7       | error

    8 let_section: LPAREN LET let_list RPAREN

    9 let_list: let_elem
   10         | let_list let_elem

   11 let_elem: LPAREN TYPE SYMBOL s_expr RPAREN
   12         | LPAREN SYMBOL s_expr RPAREN

   13 number: INT
   14       | DOUBLE

   15 f_expr: LPAREN FUNC s_expr RPAREN
   16       | LPAREN FUNC s_expr s_expr RPAREN


Terminals, with rules where they appear

$end (0) 0
error (256) 7
FUNC (258) 15 16
SYMBOL (259) 3 11 12
TYPE (260) 11
INT (261) 13
DOUBLE (262) 14
LPAREN (263) 6 8 11 12 15 16
RPAREN (264) 6 8 11 12 15 16
EOL (265) 1
QUIT (266) 5
LET (267) 8


Nonterminals, with rules where they appear

$accept (13)
    on left: 0
program (14)
    on left: 1, on right: 0
s_expr (15)
    on left: 2 3 4 5 6 7, on right: 1 6 11 12 15 16
let_section (16)
    on left: 8, on right: 6
let_list (17)
    on left: 9 10, on right: 8 10
let_elem (18)
    on left: 11 12, on right: 9 10
number (19)
    on left: 13 14, on right: 2
f_expr (20)
    on left: 15 16, on right: 4


state 0

    0 $accept: . program $end

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    program  go to state 7
    s_expr   go to state 8
    number   go to state 9
    f_expr   go to state 10


state 1

    7 s_expr: error .

    $default  reduce using rule 7 (s_expr)


state 2

    3 s_expr: SYMBOL .

    $default  reduce using rule 3 (s_expr)


state 3

   13 number: INT .

    $default  reduce using rule 13 (number)


state 4

   14 number: DOUBLE .

    $default  reduce using rule 14 (number)


state 5

    6 s_expr: LPAREN . let_section s_expr RPAREN
   15 f_expr: LPAREN . FUNC s_expr RPAREN
   16       | LPAREN . FUNC s_expr s_expr RPAREN

    FUNC    shift, and go to state 11
    LPAREN  shift, and go to state 12

    let_section  go to state 13


state 6

    5 s_expr: QUIT .

    $default  reduce using rule 5 (s_expr)


state 7

    0 $accept: program . $end

    $end  shift, and go to state 14


state 8

    1 program: s_expr . EOL

    EOL  shift, and go to state 15


state 9

    2 s_expr: number .

    $default  reduce using rule 2 (s_expr)


state 10

    4 s_expr: f_expr .

    $default  reduce using rule 4 (s_expr)


state 11

   15 f_expr: LPAREN FUNC . s_expr RPAREN
   16       | LPAREN FUNC . s_expr s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 16
    number  go to state 9
    f_expr  go to state 10


state 12

    8 let_section: LPAREN . LET let_list RPAREN

    LET  shift, and go to state 17


state 13

    6 s_expr: LPAREN let_section . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 18
    number  go to state 9
    f_expr  go to state 10


state 14

    0 $accept: program $end .

    $default  accept


state 15

    1 program: s_expr EOL .

    $default  reduce using rule 1 (program)


state 16

   15 f_expr: LPAREN FUNC s_expr . RPAREN
   16       | LPAREN FUNC s_expr . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    RPAREN  shift, and go to state 19
    QUIT    shift, and go to state 6

    s_expr  go to state 20
    number  go to state 9
    f_expr  go to state 10


state 17

    8 let_section: LPAREN LET . let_list RPAREN

    LPAREN  shift, and go to state 21

    let_list  go to state 22
    let_elem  go to state 23


state 18

    6 s_expr: LPAREN let_section s_expr . RPAREN

    RPAREN  shift, and go to state 24


state 19

   15 f_expr: LPAREN FUNC s_expr RPAREN .

    $default  reduce using rule 15 (f_expr)


state 20

   16 f_expr: LPAREN FUNC s_expr s_expr . RPAREN

    RPAREN  shift, and go to state 25


state 21

   11 let_elem: LPAREN . TYPE SYMBOL s_expr RPAREN
   12         | LPAREN . SYMBOL s_expr RPAREN

    SYMBOL  shift, and go to state 26
    TYPE    shift, and go to state 27


state 22

    8 let_section: LPAREN LET let_list . RPAREN
   10 let_list: let_list . let_elem

    LPAREN  shift, and go to state 21
    RPAREN  shift, and go to state 28

    let_elem  go to state 29


state 23

    9 let_list: let_elem .

    $default  reduce using rule 9 (let_list)


state 24

    6 s_expr: LPAREN let_section s_expr RPAREN .

    $default  reduce using rule 6 (s_expr)


state 25

   16 f_expr: LPAREN FUNC s_expr s_expr RPAREN .

    $default  reduce using rule 16 (f_expr)


state 26

   12 let_elem: LPAREN SYMBOL . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 30
    number  go to state 9
    f_expr  go to state 10


state 27

   11 let_elem: LPAREN TYPE . SYMBOL s_expr RPAREN

    SYMBOL  shift, and go to state 31


state 28

    8 let_section: LPAREN LET let_list RPAREN .

    $default  reduce using rule 8 (let_section)


state 29

   10 let_list: let_list let_elem .

    $default  reduce using rule 10 (let_list)


state 30

   12 let_elem: LPAREN SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 32


state 31

   11 let_elem: LPAREN TYPE SYMBOL . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 33
    number  go to state 9
    f_expr  go to state 10


state 32

   12 let_elem: LPAREN SYMBOL s_expr RPAREN .

    $default  reduce using rule 12 (let_elem)


state 33

   11 let_elem: LPAREN TYPE SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 34


state 34

   11 let_elem: LPAREN TYPE SYMBOL s_expr RPAREN .

    $default  reduce using rule 11 (let_elem)
